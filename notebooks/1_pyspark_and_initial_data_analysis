{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1e9822e1-71e4-4471-a449-bc8e49d50349",
   "metadata": {},
   "source": [
    "## 1.1 Import Libraries and Initialise PySpark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b9ef0054-f5f7-4c22-ba9c-af3b5a603773",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<pyspark.sql.session.SparkSession object at 0x10933d6a0>\n"
     ]
    }
   ],
   "source": [
    "# Importing necessary PySpark libraries\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import col\n",
    "\n",
    "# Initialising Spark session\n",
    "spark = SparkSession.builder \\\n",
    "    .appName(\"Credit Card Fraud Detection\") \\\n",
    "    .getOrCreate()\n",
    "\n",
    "# Checking if Spark is initialised\n",
    "print(spark)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8162abe2-a95d-4fb4-a5ab-cf8ca76481b9",
   "metadata": {},
   "source": [
    "## 1.2 Load the Dataset into PySpark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "5045d755-813c-4734-a0fb-4142fb733f8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- Time: double (nullable = true)\n",
      " |-- V1: double (nullable = true)\n",
      " |-- V2: double (nullable = true)\n",
      " |-- V3: double (nullable = true)\n",
      " |-- V4: double (nullable = true)\n",
      " |-- V5: double (nullable = true)\n",
      " |-- V6: double (nullable = true)\n",
      " |-- V7: double (nullable = true)\n",
      " |-- V8: double (nullable = true)\n",
      " |-- V9: double (nullable = true)\n",
      " |-- V10: double (nullable = true)\n",
      " |-- V11: double (nullable = true)\n",
      " |-- V12: double (nullable = true)\n",
      " |-- V13: double (nullable = true)\n",
      " |-- V14: double (nullable = true)\n",
      " |-- V15: double (nullable = true)\n",
      " |-- V16: double (nullable = true)\n",
      " |-- V17: double (nullable = true)\n",
      " |-- V18: double (nullable = true)\n",
      " |-- V19: double (nullable = true)\n",
      " |-- V20: double (nullable = true)\n",
      " |-- V21: double (nullable = true)\n",
      " |-- V22: double (nullable = true)\n",
      " |-- V23: double (nullable = true)\n",
      " |-- V24: double (nullable = true)\n",
      " |-- V25: double (nullable = true)\n",
      " |-- V26: double (nullable = true)\n",
      " |-- V27: double (nullable = true)\n",
      " |-- V28: double (nullable = true)\n",
      " |-- Amount: double (nullable = true)\n",
      " |-- Class: integer (nullable = true)\n",
      "\n",
n",
      "|Time|                V1|                 V2|              V3|                V4|                 V5|                 V6|                 V7|                V8|                V9|                V10|               V11|               V12|               V13|               V14|               V15|               V16|               V17|                V18|               V19|                V20|                 V21|                V22|               V23|               V24|               V25|               V26|                 V27|                V28|Amount|Class|\n",
n",
      "| 0.0|  -1.3598071336738|-0.0727811733098497|2.53634673796914|  1.37815522427443| -0.338320769942518|  0.462387777762292|  0.239598554061257|0.0986979012610507| 0.363786969611213| 0.0907941719789316|-0.551599533260813|-0.617800855762348|-0.991389847235408|-0.311169353699879|  1.46817697209427|-0.470400525259478| 0.207971241929242| 0.0257905801985591| 0.403992960255733|  0.251412098239705|  -0.018306777944153|  0.277837575558899|-0.110473910188767|0.0669280749146731| 0.128539358273528|-0.189114843888824|   0.133558376740387|-0.0210530534538215|149.62|    0|\n",
      "| 0.0|  1.19185711131486|   0.26615071205963|0.16648011335321| 0.448154078460911| 0.0600176492822243|-0.0823608088155687|-0.0788029833323113|0.0851016549148104|-0.255425128109186| -0.166974414004614|  1.61272666105479|  1.06523531137287|  0.48909501589608|-0.143772296441519| 0.635558093258208| 0.463917041022171|-0.114804663102346| -0.183361270123994|-0.145783041325259|-0.0690831352230203|  -0.225775248033138| -0.638671952771851| 0.101288021253234|-0.339846475529127| 0.167170404418143| 0.125894532368176|-0.00898309914322813| 0.0147241691924927|  2.69|    0|\n",
      "| 1.0| -1.35835406159823|  -1.34016307473609|1.77320934263119| 0.379779593034328| -0.503198133318193|   1.80049938079263|  0.791460956450422| 0.247675786588991| -1.51465432260583|  0.207642865216696| 0.624501459424895| 0.066083685268831| 0.717292731410831|-0.165945922763554|  2.34586494901581| -2.89008319444231|  1.10996937869599| -0.121359313195888| -2.26185709530414|  0.524979725224404|   0.247998153469754|  0.771679401917229| 0.909412262347719|-0.689280956490685|-0.327641833735251|-0.139096571514147| -0.0553527940384261|-0.0597518405929204|378.66|    0|\n",
      "| 1.0|-0.966271711572087| -0.185226008082898|1.79299333957872|-0.863291275036453|-0.0103088796030823|   1.24720316752486|   0.23760893977178| 0.377435874652262| -1.38702406270197|-0.0549519224713749|-0.226487263835401| 0.178228225877303| 0.507756869957169| -0.28792374549456|-0.631418117709045|  -1.0596472454325|-0.684092786345479|   1.96577500349538|  -1.2326219700892| -0.208037781160366|  -0.108300452035545|0.00527359678253453|-0.190320518742841| -1.17557533186321| 0.647376034602038|-0.221928844458407|  0.0627228487293033| 0.0614576285006353| 123.5|    0|\n",
      "| 2.0| -1.15823309349523|  0.877736754848451|  1.548717846511| 0.403033933955121| -0.407193377311653| 0.0959214624684256|  0.592940745385545|-0.270532677192282| 0.817739308235294|  0.753074431976354|-0.822842877946363|  0.53819555014995|   1.3458515932154| -1.11966983471731| 0.175121130008994|-0.451449182813529|-0.237033239362776|-0.0381947870352842| 0.803486924960175|  0.408542360392758|-0.00943069713232919|   0.79827849458971|-0.137458079619063| 0.141266983824769|-0.206009587619756| 0.502292224181569|   0.219422229513348|  0.215153147499206| 69.99|    0|\n",
n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Loading the dataset into a PySpark DataFrame\n",
    "data_path = \"../data/raw/creditcard.csv\" \n",
    "df = spark.read.csv(data_path, header=True, inferSchema=True)\n",
    "\n",
    "# Displaying the schema to verify data types\n",
    "df.printSchema()\n",
    "\n",
    "# Showing the first few rows to check the data\n",
    "df.show(5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d19f4475-3bf4-4d08-80d1-260cfd21e444",
   "metadata": {},
   "source": [
    "## 1.3 Exploratory Data Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daef1a7a-6616-4872-8acc-fd54f3cb384c",
   "metadata": {},
   "source": [
    "### 1.3.1 Summary Statistics\n",
    "**Goal:** Calculating summary statistics (mean, min, max, stddev) for numerical columns to understand the distribution of features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b96446e3-bf02-4758-b2a2-7b7323a65d4f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>summary</th>\n",
       "      <th>Time</th>\n",
       "      <th>V1</th>\n",
       "      <th>V2</th>\n",
       "      <th>V3</th>\n",
       "      <th>V4</th>\n",
       "      <th>V5</th>\n",
       "      <th>V6</th>\n",
       "      <th>V7</th>\n",
       "      <th>V8</th>\n",
       "      <th>...</th>\n",
       "      <th>V21</th>\n",
       "      <th>V22</th>\n",
       "      <th>V23</th>\n",
       "      <th>V24</th>\n",
       "      <th>V25</th>\n",
       "      <th>V26</th>\n",
       "      <th>V27</th>\n",
       "      <th>V28</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>count</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>...</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "      <td>284807</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mean</td>\n",
       "      <td>94813.85957508067</td>\n",
       "      <td>9.516248586879277E-16</td>\n",
       "      <td>-4.151383611725859E-17</td>\n",
       "      <td>-1.3156692677161953E-15</td>\n",
       "      <td>1.4976914722303291E-15</td>\n",
       "      <td>8.941441625255696E-16</td>\n",
       "      <td>1.3971002539462024E-15</td>\n",
       "      <td>-2.6664656275316093E-16</td>\n",
       "      <td>1.528826849318273E-16</td>\n",
       "      <td>...</td>\n",
       "      <td>3.718282533002536E-16</td>\n",
       "      <td>-4.630389413078843E-16</td>\n",
       "      <td>2.9858028284335985E-16</td>\n",
       "      <td>4.504351011597839E-15</td>\n",
       "      <td>7.153153300204557E-16</td>\n",
       "      <td>1.6364035688721307E-15</td>\n",
       "      <td>-3.568593220079729E-16</td>\n",
       "      <td>-1.2593860860572196E-16</td>\n",
       "      <td>88.34961925093698</td>\n",
       "      <td>0.001727485630620034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>stddev</td>\n",
       "      <td>47488.145954566266</td>\n",
       "      <td>1.9586958038574889</td>\n",
       "      <td>1.6513085794769968</td>\n",
       "      <td>1.5162550051777701</td>\n",
       "      <td>1.4158685749409217</td>\n",
       "      <td>1.3802467340314388</td>\n",
       "      <td>1.332271089757576</td>\n",
       "      <td>1.2370935981826656</td>\n",
       "      <td>1.194352902669203</td>\n",
       "      <td>...</td>\n",
       "      <td>0.734524014371313</td>\n",
       "      <td>0.725701560440911</td>\n",
       "      <td>0.6244602955949902</td>\n",
       "      <td>0.6056470678271607</td>\n",
       "      <td>0.5212780705409428</td>\n",
       "      <td>0.48222701326105727</td>\n",
       "      <td>0.4036324949650301</td>\n",
       "      <td>0.3300832641602508</td>\n",
       "      <td>250.12010924018836</td>\n",
       "      <td>0.041527189635464895</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>min</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-56.407509631329</td>\n",
       "      <td>-72.7157275629303</td>\n",
       "      <td>-48.3255893623954</td>\n",
       "      <td>-5.68317119816995</td>\n",
       "      <td>-113.743306711146</td>\n",
       "      <td>-26.1605059358433</td>\n",
       "      <td>-43.5572415712451</td>\n",
       "      <td>-73.2167184552674</td>\n",
       "      <td>...</td>\n",
       "      <td>-34.8303821448146</td>\n",
       "      <td>-10.933143697655</td>\n",
       "      <td>-44.8077352037913</td>\n",
       "      <td>-2.83662691870341</td>\n",
       "      <td>-10.2953970749851</td>\n",
       "      <td>-2.60455055280817</td>\n",
       "      <td>-22.5656793207827</td>\n",
       "      <td>-15.4300839055349</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max</td>\n",
       "      <td>172792.0</td>\n",
       "      <td>2.45492999121121</td>\n",
       "      <td>22.0577289904909</td>\n",
       "      <td>9.38255843282114</td>\n",
       "      <td>16.8753440335975</td>\n",
       "      <td>34.8016658766686</td>\n",
       "      <td>73.3016255459646</td>\n",
       "      <td>120.589493945238</td>\n",
       "      <td>20.0072083651213</td>\n",
       "      <td>...</td>\n",
       "      <td>27.2028391573154</td>\n",
       "      <td>10.5030900899454</td>\n",
       "      <td>22.5284116897749</td>\n",
       "      <td>4.58454913689817</td>\n",
       "      <td>7.51958867870916</td>\n",
       "      <td>3.5173456116238</td>\n",
       "      <td>31.6121981061363</td>\n",
       "      <td>33.8478078188831</td>\n",
       "      <td>25691.16</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "  summary                Time                     V1                      V2  \\\n",
       "0   count              284807                 284807                  284807   \n",
       "1    mean   94813.85957508067  9.516248586879277E-16  -4.151383611725859E-17   \n",
       "2  stddev  47488.145954566266     1.9586958038574889      1.6513085794769968   \n",
       "3     min                 0.0       -56.407509631329       -72.7157275629303   \n",
       "4     max            172792.0       2.45492999121121        22.0577289904909   \n",
       "\n",
       "                        V3                      V4                     V5  \\\n",
       "0                   284807                  284807                 284807   \n",
       "1  -1.3156692677161953E-15  1.4976914722303291E-15  8.941441625255696E-16   \n",
       "2       1.5162550051777701      1.4158685749409217     1.3802467340314388   \n",
       "3        -48.3255893623954       -5.68317119816995      -113.743306711146   \n",
       "4         9.38255843282114        16.8753440335975       34.8016658766686   \n",
       "\n",
       "                       V6                       V7                     V8  \\\n",
       "0                  284807                   284807                 284807   \n",
       "1  1.3971002539462024E-15  -2.6664656275316093E-16  1.528826849318273E-16   \n",
       "2       1.332271089757576       1.2370935981826656      1.194352902669203   \n",
       "3       -26.1605059358433        -43.5572415712451      -73.2167184552674   \n",
       "4        73.3016255459646         120.589493945238       20.0072083651213   \n",
       "\n",
       "   ...                    V21                     V22                     V23  \\\n",
       "0  ...                 284807                  284807                  284807   \n",
       "1  ...  3.718282533002536E-16  -4.630389413078843E-16  2.9858028284335985E-16   \n",
       "2  ...      0.734524014371313       0.725701560440911      0.6244602955949902   \n",
       "3  ...      -34.8303821448146        -10.933143697655       -44.8077352037913   \n",
       "4  ...       27.2028391573154        10.5030900899454        22.5284116897749   \n",
       "\n",
       "                     V24                    V25                     V26  \\\n",
       "0                 284807                 284807                  284807   \n",
       "1  4.504351011597839E-15  7.153153300204557E-16  1.6364035688721307E-15   \n",
       "2     0.6056470678271607     0.5212780705409428     0.48222701326105727   \n",
       "3      -2.83662691870341      -10.2953970749851       -2.60455055280817   \n",
       "4       4.58454913689817       7.51958867870916         3.5173456116238   \n",
       "\n",
       "                      V27                      V28              Amount  \\\n",
       "0                  284807                   284807              284807   \n",
       "1  -3.568593220079729E-16  -1.2593860860572196E-16   88.34961925093698   \n",
       "2      0.4036324949650301       0.3300832641602508  250.12010924018836   \n",
       "3       -22.5656793207827        -15.4300839055349                 0.0   \n",
       "4        31.6121981061363         33.8478078188831            25691.16   \n",
       "\n",
       "                  Class  \n",
       "0                284807  \n",
       "1  0.001727485630620034  \n",
       "2  0.041527189635464895  \n",
       "3                     0  \n",
       "4                     1  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converting to Pandas for better readability (works only for a small dataframe)\n",
    "desc_df = df.describe().toPandas()\n",
    "desc_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cfbb0ef-7923-47a2-8d6e-5329b2bf8174",
   "metadata": {},
   "source": [
    "### 1.3.2 Missing Values Check\n",
    "**Goal:** To create a quick query to count the number of null values in each column as PySpark doesn’t have a built-in function to check for missing values directly, "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7fc9ad90-58cc-4452-9f8e-5153eaf7fdbd",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 12:>                                                         (0 + 8) / 8]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+----+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+------+-----+\n",
      "|Time| V1| V2| V3| V4| V5| V6| V7| V8| V9|V10|V11|V12|V13|V14|V15|V16|V17|V18|V19|V20|V21|V22|V23|V24|V25|V26|V27|V28|Amount|Class|\n",
      "+----+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+------+-----+\n",
      "|   0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|     0|    0|\n",
      "+----+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+------+-----+\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "from pyspark.sql.functions import isnan, when, count\n",
    "\n",
    "# Creating a DataFrame to store the count of null values in each column\n",
    "missing_values_df = df.select([count(when(col(c).isNull(), c)).alias(c) for c in df.columns])\n",
    "missing_values_df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "941527ce-6f15-4202-8e7b-cfebb8c6517e",
   "metadata": {},
   "source": [
    "**Insight:** There is no missing values"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "venv-fds",
   "language": "python",
   "name": "venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
